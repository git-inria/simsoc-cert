SimSoC-Cert, a toolkit for generating certified processor simulators
--------------------------------------------------------------------

This files describes the possible usages of the code generator simgen.

Files extensions:
-----------------

.pc : ARMv6 instruction semantics description generated by the
      refARMparsing tools (text file)

.dat: ARMv6 instruction encoding or assembly description generated by
      the refARMparsing tools (binary file)

.arm: ARMv6 binary code generated by ./main (binary file)

.wgt: space-separated list of non-negative integers (weights) of length
      the number of ARMv6 instructions (including the Thumb instructions)
      (can be generated automatically by SimSoC)

General options:
----------------

-h|-help|--help: Display the list of options

-d:	Debugging mode

-v:	Verbose mode

Options that can be used in conjonction with the -ipc option:
-------------------------------------------------------------

-check:	Internally reparse the pseudocode after parsing
	and after normalization with -norm option

Usages:

Pretty-print and normalize pseudocode:
--------------------------------------

./main -ipc file1.pc -opc > file2.pc

Options:
-norm:	Normalize pseudocode

Generate a Coq decoder from an ARMv6 instruction encoding description:
----------------------------------------------------------------------

./main -idec file1.dat -ocoq-dec > file2.v

Convert a ARMv6 instruction semantics description file into a Coq file:
-----------------------------------------------------------------------

./main -ipc file1.pc -coq-inst > file2.v

Remark: the pseudocode is automatically normalized (like with -norm).

Generate ARMv6 assembly instructions to test a decoder:
-------------------------------------------------------

./main -ipc file1.pc -idec file2.dat -isyntax file3.dat -oasm-test file4.txt

Options:
-s:	Set the seed to initialize the test generator

Generate ARMv6 binary instructions to test a decoder:
-----------------------------------------------------

./main -ipc file1.pc -idec file2.dat -isyntax file3.dat -obin-test > file4.arm

Options:
-s:	Set the seed to initialize the test generator

Generate a non-optimized C simulator for ARMv6:
-----------------------------------------------

./main -ipc file1.arm -idec file2.dat -ocxx prefix

Generates:
prefix.h: C header file
prefix.c: C source file, including decoders and semantics functions

Remark: the pseudocode is automatically normalized (like with -norm).

Generate an optimized C simulator from an ARMv6 description:
------------------------------------------------------------

./main -ipc file1.pc -idec file2.dat -isyntax file3.dat -oc4dt prefix

Generates:

- prefix.h:
  the instruction type and the instruction numeric identifiers
- prefix.c:
  instruction names, and the "may_branch" function
- prefix_expanded.h:
  declaration of the semantics function, with an expanded list of arguments
- prefix_expanded.hot.c, prefix_expanded.cold.c:
  implementation of the previous header file
- prefix_grouped.h:
  declaration of the semantics function, with the arguments stored
  in a structure type
- prefix_grouped.hot.c, prefix_grouped.cold.c:
  implementation of the previous header file
- prefix_arm_decode_exec.c:
  decoder for ARM32 code, which directly call the semantics function
- prefix_thumb_decode_exec.c:
  decoder for Thumb code, which directly call the semantics function
- prefix_arm_decode_store.c:
  decoder for ARM32 code, which store the decoded instruction
  using the type defined in prefix.h
- prefix_thumb_decode_store.c:
  decoder for Thumb code, which store the decoded instruction
  using the type defined in prefix.h
- prefix-llvm_generator.hpp:
  part of an ARM to LLVM translator. This file cannot be compiled
  outside SimSoC.
- prefix_printer.h, prefix_printer.c:
  instruction printers using the ASM format (C code using fprintf)
- prefix_printer.hpp, prefix_printer.cpp:
  instruction printers using the ASM format (C++ code using streams)
- print_sizes.c:
  stand-alone program to control the size of the instruction type and subtypes

Remark:
- the pseudocode is automatically normalized (like with -norm).
- the following files are not used by simlight2 (but are used by SimSoC):
  prefix-llvm_generator.hpp, prefix_printer.hpp, and prefix_printer.cpp
- the following files are not used by SimSoC:
  prefix_arm_decode_exec.c, prefix_thumb_decode_exec.c, prefix_printer.h,
  and prefix_printer.c

Options:
-iw file4.wgt: instructions of non-zero weigth are not specialized.
