#include "elf_loader.hpp"
#include <iostream>
#include <fstream>

using namespace std;

int main(int argc, const char *argv[]) {
  if (argc !=3 ) {
    cerr <<"Convert ELF file (ARM little-endian) to Coq.\n"
         <<"Usage:\n"
         <<argv[0] <<" <elf file> <coq file>\n";
    return 1;
  }
  ElfFile elf_file(argv[1]);
  ofstream ofs(argv[2]);
  const uint32_t initial_pc = elf_file.get_start_address();
  ofs <<dec <<
    "(* Generated by testgen *)\n"
    "\n"
    "Set Implicit Arguments.\n"
    "Require Import ZArith Bitvec State Arm Util List.\n"
    "\n"
    "(* Initial CPSR: ARM32 instruction set, FIQ and IRQ disabled, System mode *)\n"
    "Definition initial_cpsr : word := repr (Zpos 1~1~1~0~1~1~1~1~1).\n"
    "\n"
    "Definition initial_spsr (m : option exn_mode) : word := w0.\n"
    "\n"
    "(* Initial registers: only PC value is significant *)\n"
    "Definition initial_reg (r : register) : word :=\n"
    "  match r with\n"
    "    | R p => if zeq p 15 then repr "
      <<initial_pc <<" else w0\n"
    "    | _ => w0\n"
    "  end.\n"
    "\n";
  elf_file.load_sections(ofs);
  ofs <<
    "\n"
    "Definition initial_scc_reg (r : regnum) : word := w0.\n"
    "\n"
    "Definition proc_initial_state : Proc.state :=\n"
    "  Proc.mk_state initial_cpsr initial_spsr initial_reg nil sys.\n"
    "\n"
    "Definition scc_initial_state : SCC.state :=\n"
    "  SCC.mk_state initial_scc_reg initial_mem.\n"
    "\n"
    "Definition initial_state : state :=\n"
    "  mk_state proc_initial_state scc_initial_state.\n";
  ofs.close();
  return 0;
}
