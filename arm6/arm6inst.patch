--- arm6.txt	2010-05-25 17:48:56.000000000 +0800
+++ arm6inst.txt	2010-06-08 17:03:38.000000000 +0800
@@ -7687,7 +7687,7 @@
            Operation
            LR = address of the instruction after the BLX instruction
            CPSR T bit = 1
-           PC = PC + (SignExtend(signed_immed_24) << 2) + (H << 1)
+           PC = PC + (SignExtend_30(signed_immed_24) << 2) + (H << 1)
 
 
 
@@ -7904,8 +7904,8 @@
                         else
                              J Flag = 1
                              Start opcode execution at jpc
-                   else
-                        if ((CV bit of Jazelle OS Control register) == 0) AND
+                    else
+                        if ((CV bit of Jazelle OS Control register) == 0) and
                                          (IMPLEMENTATION DEFINED CONDITION) then
                              PC = invalidhandler
                         else
@@ -8065,10 +8065,11 @@
 
 
          Operation
-         if Rm == 0
-              Rd = 32
-         else
-              Rd = 31 - (bit position of most significant'1' in Rm)
+         if ConditionPassed(cond) then
+           if Rm == 0
+                Rd = 32
+           else
+                Rd = 31 - (bit position of most significant'1' in Rm)
 
 
          Usage
@@ -10358,6 +10359,7 @@
 
 
          Operation
+         /*
          There are four categories of PSR bits, according to rules about updating them, see Types of PSR bits on
          page A2-11 for details.
 
@@ -10377,6 +10379,7 @@
            5TEJ                          0x06FFFF00          0xF8000000         0x0000000F        0x01000020
 
            6                             0x06F0FC00          0xF80F0200         0x000001DF        0x01000020
+         */
 
 
          if ConditionPassed(cond) then
@@ -11915,9 +11918,11 @@
 
            assert end_address == address + 8
 
+           /*
            where start_address and end_address are determined as described in Addressing Mode 4 - Load and Store
            Multiple on page A5-41, except that Number_Of_Set_Bits_in(register_list) evaluates to 2, rather than
            depending on bits[15:0] of the instruction.
+           */
 
 
            Notes
@@ -14583,14 +14588,16 @@
               UNPREDICTABLE
          assert end_address == address + 8
 
+         /*
          where start_address and end_address are determined as described in Addressing Mode 4 - Load and Store
          Multiple on page A5-41, with the following modifications:
 
-         •      Number_Of_Set_Bits_in(register_list) evaluates to 2, rather than depending on bits[15:0] of the
+         .      Number_Of_Set_Bits_in(register_list) evaluates to 2, rather than depending on bits[15:0] of the
                 instruction.
 
-         •      Rn is the banked version of R13 belonging to the mode specified by the instruction, rather than being
+         .      Rn is the banked version of R13 belonging to the mode specified by the instruction, rather than being
                 the version of R13 of the current mode.
+         */
 
 
          Notes
@@ -14774,7 +14781,7 @@
              Rd[15:0] = SignedSat(Rm[15:0], sat_imm + 1)
              Rd[31:16] = SignedSat(Rm[31:16], sat_imm + 1)
              if SignedDoesSat(Rm[15:0], sat_imm + 1)
-                                           OR SignedDoesSat(Rm[31:16], sat_imm + 1) then
+                                           or SignedDoesSat(Rm[31:16], sat_imm + 1) then
                  Q Flag = 1
 
 
@@ -16207,15 +16214,6 @@
                    Memory[address,4] = Rm
                    Rd = temp
                if Shared(address) then   /* ARMv6 */
-
-
-
-
-A4-212                 Copyright © 1996-1998, 2000, 2004, 2005 ARM Limited. All rights reserved.          ARM DDI 0100I
-                                                                                                      ARM Instructions
-
-
-
                  physical_address = TLB(address)
                  ClearExclusiveByAddress(physical_address,processor_id,4)
                  /* See Summary of operation on page A2-49 */
@@ -18442,7 +18440,7 @@
                Rd[15:0] = UnsignedSat(Rm[15:0], sat_imm) // Rm[15:0] treated as signed
                Rd[31:16] = UnsignedSat(Rm[31:16], sat_imm) // Rm[31:16] treated as signed
                if UnsignedDoesSat(Rm[15:0], sat_imm)
-                                             OR UnsignedDoesSat(Rm[31:16], sat_imm) then
+                                             or UnsignedDoesSat(Rm[31:16], sat_imm) then
                    Q Flag = 1
 
 
@@ -25166,7 +25164,7 @@
 
          Operation
          MemoryAccess(B-bit, E-bit)
-         address = (PC & 0xFFFFFFFC) + (immed_8 * 4)
+         address = (PC AND 0xFFFFFFFC) + (immed_8 * 4)
          Rd = Memory[address, 4]
 
 
@@ -49653,4 +49651,4 @@
 
 
 Glossary-18   Copyright © 1996-1998, 2000, 2004, 2005 ARM Limited. All rights reserved.   ARM DDI 0100I
-
\ No newline at end of file
+
