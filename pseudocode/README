This files describes the possible usages of the code generator ./main.

Files extensions:
-----------------

.pc : ARMv6 instruction semantics description generated by the
      refARMparsing tools (text file)

.dat: ARMv6 instruction encoding or assembly description generated by
      the refARMparsing tools (binary file)

.arm: ARMv6 binary code generated by ./main (binary file)

.wgt: space-separated list of non-negative integers (weights) of length
      the number of ARMv6 instructions (including the Thumb instructions)
      (can be generated automatically by SimSoC)

General options:
----------------

-h|-help|--help: Display the list of options

-d:	Debugging mode

-v:	Verbose mode

Options that can be used in conjonction with the -ipc option:
-------------------------------------------------------------

-check:	Internally reparse the pseudocode after parsing
	and after normalization with -norm option

Usages:

Pretty-print and normalize pseudocode:
--------------------------------------

./main -ipc file1.pc -opc > file2.pc

Options:
-norm:	Normalize pseudocode

Generate a Coq decoder from an ARMv6 instruction encoding description:
----------------------------------------------------------------------

./main -idec file1.dat -ocoq-dec > file2.v

Convert a ARMv6 instruction semantics description file into a Coq file:
-----------------------------------------------------------------------

./main -ipc file1.arm -coq-inst > file2.v

Remark: the pseudocode is automatically normalized (like with -norm).

Generate ARMv6 assembly instructions to test a decoder:
-------------------------------------------------------

./main -ipc file1.pc -idec file2.dat -isyntax file3.dat -oasm-test file4.txt

Options:
-s:	Set the seed to initialize the test generator

Generate ARMv6 binary instructions to test a decoder:
-----------------------------------------------------

./main -ipc file1.pc -idec file2.dat -isyntax file3.dat -obin-test > file4.arm

Options:
-s:	Set the seed to initialize the test generator

Generate a non-optimized C simulator for ARMv6:
-----------------------------------------------

./main -ipc file1.arm -idec file2.dat -ocxx > file3.c

Remark: the pseudocode is automatically normalized (like with -norm).

Generate an optimized C simulator from an ARMv6:
------------------------------------------------

./main -ipc file1.pc -idec file2.dat -isyntax file3.dat -oc4dt prefix

Generates:
prefix_zo.c: ... to be completed

Remark: the pseudocode is automatically normalized (like with -norm).

Options:
-iw file4.wgt: 
